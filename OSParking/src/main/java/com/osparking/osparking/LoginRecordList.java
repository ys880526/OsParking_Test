/* 
 * Copyright (C) 2015 Open Source Parking Inc.(www.osparking.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.osparking.osparking;

import com.osparking.global.names.JDBCMySQL;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.WARNING_MESSAGE;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import static com.osparking.global.names.DB_Access.parkingLotLocale;
import static com.osparking.global.names.DB_Access.readSettings;
import static com.osparking.global.Globals.*;

/**
 *
 * @author Open Source Parking Inc.
 */
public class LoginRecordList extends javax.swing.JFrame {
    private static Logger logException = null;
    String searchCondition = "";

    /**
     * Creates new form LoginRecordList
     */
    public LoginRecordList() {
        initComponents();
        
        setIconImages(OSPiconList);
        
//        getContentPane().setBackground(PopUpBackground);
//        LoginRecordListTopPanel.setBackground(PopUpBackground);
        initUserIDComboBox();
        
        BeginDateChooser.setLocale(parkingLotLocale);
        EndDateChooser.setLocale(parkingLotLocale);
        Date today = new Date();
        BeginDateChooser.setDate(getDateFromGivenDate(today, -7));
        EndDateChooser.setDate(today);
        
        LoginRecordTable.setAutoCreateRowSorter(true);
        RefreshTableContents(BeginDateChooser.getDate(), EndDateChooser.getDate());  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filler10 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0));
        filler8 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        filler11 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0));
        filler9 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        wholePanel = new javax.swing.JPanel();
        closePanel = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        CloseFormButton = new javax.swing.JButton();
        LoginRecordListTopPanel = new javax.swing.JPanel();
        titlePanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        datePanel = new javax.swing.JPanel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        UserIDComboBox = new javax.swing.JComboBox();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0));
        BeginDateChooser = new com.toedter.calendar.JDateChooser();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0));
        jLabel2 = new javax.swing.JLabel();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0));
        EndDateChooser = new com.toedter.calendar.JDateChooser();
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0));
        SearchLoginRecordButton = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler12 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        jScrollPane1 = new javax.swing.JScrollPane();
        LoginRecordTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("User Login Record");
        setPreferredSize(new java.awt.Dimension(850, 527));
        getContentPane().add(filler10, java.awt.BorderLayout.LINE_END);
        getContentPane().add(filler8, java.awt.BorderLayout.PAGE_START);
        getContentPane().add(filler11, java.awt.BorderLayout.LINE_START);
        getContentPane().add(filler9, java.awt.BorderLayout.SOUTH);

        wholePanel.setLayout(new javax.swing.BoxLayout(wholePanel, javax.swing.BoxLayout.Y_AXIS));

        closePanel.setLayout(new javax.swing.BoxLayout(closePanel, javax.swing.BoxLayout.LINE_AXIS));
        closePanel.add(filler1);

        CloseFormButton.setFont(new java.awt.Font(font_Type, font_Style, font_Size));
        CloseFormButton.setMnemonic('c');
        CloseFormButton.setText("Close");
        CloseFormButton.setMaximumSize(new java.awt.Dimension(90, 40));
        CloseFormButton.setMinimumSize(new java.awt.Dimension(90, 40));
        CloseFormButton.setPreferredSize(new java.awt.Dimension(90, 40));
        CloseFormButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseFormButtonActionPerformed(evt);
            }
        });
        closePanel.add(CloseFormButton);

        wholePanel.add(closePanel);

        LoginRecordListTopPanel.setLayout(new javax.swing.BoxLayout(LoginRecordListTopPanel, javax.swing.BoxLayout.Y_AXIS));

        titlePanel.setLayout(new javax.swing.BoxLayout(titlePanel, javax.swing.BoxLayout.LINE_AXIS));

        jLabel3.setFont(new java.awt.Font(font_Type, font_Style, font_Size));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("User Login Record");
        jLabel3.setFocusable(false);
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel3.setMaximumSize(new java.awt.Dimension(32767, 28));
        titlePanel.add(jLabel3);

        LoginRecordListTopPanel.add(titlePanel);

        datePanel.setLayout(new javax.swing.BoxLayout(datePanel, javax.swing.BoxLayout.LINE_AXIS));
        datePanel.add(filler3);

        UserIDComboBox.setFont(new java.awt.Font(font_Type, font_Style, font_Size));
        UserIDComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        UserIDComboBox.setMaximumSize(new java.awt.Dimension(32767, 28));
        UserIDComboBox.setMinimumSize(new java.awt.Dimension(100, 28));
        UserIDComboBox.setPreferredSize(new java.awt.Dimension(100, 28));
        datePanel.add(UserIDComboBox);
        datePanel.add(filler4);

        BeginDateChooser.setFont(new java.awt.Font(font_Type, font_Style, font_Size));
        BeginDateChooser.setMaximumSize(new java.awt.Dimension(32767, 28));
        datePanel.add(BeginDateChooser);
        datePanel.add(filler5);

        jLabel2.setFont(new java.awt.Font(font_Type, font_Style, font_Size));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("~");
        jLabel2.setFocusable(false);
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        datePanel.add(jLabel2);
        datePanel.add(filler6);

        EndDateChooser.setFont(new java.awt.Font(font_Type, font_Style, font_Size));
        EndDateChooser.setMaximumSize(new java.awt.Dimension(32767, 28));
        datePanel.add(EndDateChooser);
        datePanel.add(filler7);

        SearchLoginRecordButton.setFont(new java.awt.Font(font_Type, font_Style, font_Size));
        SearchLoginRecordButton.setMnemonic('s');
        SearchLoginRecordButton.setText("Search");
        SearchLoginRecordButton.setMaximumSize(new java.awt.Dimension(90, 40));
        SearchLoginRecordButton.setMinimumSize(new java.awt.Dimension(90, 40));
        SearchLoginRecordButton.setPreferredSize(new java.awt.Dimension(90, 40));
        SearchLoginRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchLoginRecordButtonActionPerformed(evt);
            }
        });
        datePanel.add(SearchLoginRecordButton);
        datePanel.add(filler2);

        LoginRecordListTopPanel.add(datePanel);

        wholePanel.add(LoginRecordListTopPanel);
        wholePanel.add(filler12);

        LoginRecordTable.setFont(new java.awt.Font(font_Type, font_Style, font_Size));
        LoginRecordTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        LoginRecordTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        LoginRecordTable.getTableHeader().setFont(new java.awt.Font(font_Type, font_Style, font_Size));
        LoginRecordTable.setRowHeight(28);
        jScrollPane1.setViewportView(LoginRecordTable);

        wholePanel.add(jScrollPane1);

        getContentPane().add(wholePanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchLoginRecordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchLoginRecordButtonActionPerformed
        getDatesRefreshTable();     
    }//GEN-LAST:event_SearchLoginRecordButtonActionPerformed

    private void CloseFormButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseFormButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_CloseFormButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginRecordList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginRecordList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginRecordList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginRecordList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        initializeLoggers();
        checkOptions(args);
        readSettings();
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginRecordList().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser BeginDateChooser;
    private javax.swing.JButton CloseFormButton;
    private com.toedter.calendar.JDateChooser EndDateChooser;
    private javax.swing.JPanel LoginRecordListTopPanel;
    private javax.swing.JTable LoginRecordTable;
    private javax.swing.JButton SearchLoginRecordButton;
    private javax.swing.JComboBox UserIDComboBox;
    private javax.swing.JPanel closePanel;
    private javax.swing.JPanel datePanel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler10;
    private javax.swing.Box.Filler filler11;
    private javax.swing.Box.Filler filler12;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.Box.Filler filler8;
    private javax.swing.Box.Filler filler9;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JPanel wholePanel;
    // End of variables declaration//GEN-END:variables

    private void RefreshTableContents(Date beginDate, Date endDate) {
        
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String startDate = dateFormat.format(beginDate);
        String stopDate = dateFormat.format(endDate);

        searchCondition = " where '" + startDate + "' <= date(loginTS) and date(loginTS) <= '" + stopDate + "'";
        
        String user = (String)UserIDComboBox.getSelectedItem();
        if (!user.equals("(everybody)")) {
            searchCondition += " and userID = '" + user + "'";
        }
        
        Connection conn = null;
        PreparedStatement pStmt = null;
        ResultSet rs = null;        
        StringBuffer sb = new StringBuffer();
        
        //<editor-fold desc="--create select statement">
        sb.append("select recNo as 'Order', userID as 'User ID', ");
        
        sb.append(" concat(date_format(loginTS, '%Y-%m-%d '), ");
        sb.append(" if(date_format(loginTS, '%p') ='AM', 'AM', 'PM'),");
        sb.append(" date_format(loginTS, ' %h:%i:%s')) as 'Login Time', ");
        
        sb.append(" concat(date_format(logoutTS, '%Y-%m-%d '), ");
        sb.append(" if(date_format(logoutTS, '%p') ='AM', 'AM', 'PM'),");
        sb.append(" date_format(logoutTS, ' %h:%i:%s')) as 'Logout Time', ");

        sb.append(" concat( ");
        sb.append(  " lpad(timestampdiff(HOUR, loginTS, logoutTS),");
        sb.append(    " if (timestampdiff(HOUR, loginTS, logoutTS) > 9999, 5,");
        sb.append(    " if (timestampdiff(HOUR, loginTS, logoutTS) > 999, 4,");
        sb.append(    " if (timestampdiff(HOUR, loginTS, logoutTS) > 99, 3, 2))), '0'), ':',");
        sb.append(  " lpad(mod(timestampdiff(MINUTE, loginTS, logoutTS), 60), 2, '0'), ':',");
        sb.append(  " lpad(mod(timestampdiff(SECOND, loginTS, logoutTS), 60), 2, '0')) as 'Duration(hh:mm:ss)' ");
        
        sb.append(" from loginrecord" + searchCondition);
        sb.append(" order by recNo desc");
        //</editor-fold>
        
        try {
            conn = JDBCMySQL.getConnection();
            pStmt = conn.prepareStatement(sb.toString());
            rs = pStmt.executeQuery();
            LoginRecordTable.setModel(buildTableModel(rs)); // DbUtils.resultSetToTableModel(rs));
            int dimX = LoginRecordTable.getPreferredSize().width;
            int rowHeight = LoginRecordTable.getRowHeight();
            LoginRecordTable.setPreferredSize(new Dimension(dimX, 
                    rowHeight * LoginRecordTable.getRowCount()));
            SetTableColumnWidth();
        } catch (Exception ex) {
            logParkingException(Level.SEVERE, ex, "(user login record display table: content refreshing)");
        } finally {
            closeDBstuff(conn, pStmt, rs, "accessing login record from DB");            
        }
        
        /**
         * Sets a correct <code>comparator</code> method for the first <code>recNo</code>column
         * Without it, the <code>recNo</code>(an integral type primary key) field of the base table
         * (<code>LoginRecordTable</code>) is sorted as strings where a row with '2' 
         * being greater (appears later in the ascending order sorting) than a row with '10'.
         */        
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(LoginRecordTable.getModel());       
        sorter.setComparator(0, com.osparking.global.Globals.comparator);
        LoginRecordTable.setRowSorter(sorter);        
        
    }       

    @SuppressWarnings("unchecked") 
    private void initUserIDComboBox() {
        UserIDComboBox.removeAllItems();
        UserIDComboBox.addItem("(everybody)");
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = JDBCMySQL.getConnection();            
            stmt = conn.createStatement();
            rs = stmt.executeQuery("select id from users_osp order by id");
            while (rs.next()) {
                UserIDComboBox.addItem(rs.getString("id"));
            }
        } catch(Exception ex) {
            logParkingException(Level.SEVERE, ex, "ID combobox data retrieval");
        } finally {
            closeDBstuff(conn, stmt, rs, "ID combobox data retrieval");
        }
    }

    private void SetTableColumnWidth() {
        TableColumnModel tcm = LoginRecordTable.getColumnModel();
        
        ((DefaultTableCellRenderer)LoginRecordTable.getTableHeader().getDefaultRenderer())
                .setHorizontalAlignment(JLabel.CENTER);        
        
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
        tcm.getColumn(0).setCellRenderer(rightRenderer);  // order : right alignment 
 
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        tcm.getColumn(1).setCellRenderer(centerRenderer);  
        tcm.getColumn(2).setCellRenderer(centerRenderer);  
        tcm.getColumn(3).setCellRenderer(centerRenderer);  
        tcm.getColumn(4).setCellRenderer(centerRenderer);  
        
        // Adjust column width one by one
        SetAColumnWidth(tcm.getColumn(0), 90, 90, 90); // record number column
//        SetAColumnWidth(tcm.getColumn(1), 110, 110, 110); // User ID
//        SetAColumnWidth(tcm.getColumn(4), 110, 110, 110); // logged in duration
    }

    public void getDatesRefreshTable() {
        Date beginDate = BeginDateChooser.getDate();
        Date endDate = EndDateChooser.getDate();
        
        // Check if both starting and ending dates are entered
        if (beginDate == null || endDate == null) {
            JOptionPane.showConfirmDialog(this, "Please, enter both starting and ending dates!",
                    "Search Range Error", JOptionPane.PLAIN_MESSAGE, WARNING_MESSAGE);             
        } else {
            // Check if dates are chronologically wrong.
            if (beginDate.after(endDate)) {
                JOptionPane.showConfirmDialog(this, "Ending date can't precede starting date!" +
                        System.lineSeparator() +
                        "Please, change search range(dates).", "Wrong Search Range", 
                        JOptionPane.PLAIN_MESSAGE, WARNING_MESSAGE);             
            } else {
                RefreshTableContents(beginDate, endDate);
            }
        }           
    }
}
